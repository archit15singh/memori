openapi: 3.0.3
info: { title: Reflective Journaling API, version: 1.0.1 }
servers: [{ url: http://localhost:3001/api/v1 }]
security: [ { bearerAuth: [] } ]

paths:
  /chat/messages:
    post:
      summary: Send chat message and get AI response
      tags: [Chat]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message: { type: string, maxLength: 2000 }
      responses:
        '200':
          description: AI response with optional memory updates
          content:
            application/json:
              schema:
                type: object
                required: [message]
                properties:
                  message: { type: string }
                  memory_updates:
                    type: array
                    items:
                      type: object
                      required: [type, action]
                      properties:
                        id: { type: string, description: "Memory id if known/created" }
                        type:
                          type: string
                          enum: [identity, principles, focus, signals]
                        key: { type: string }
                        value: { type: string }
                        action:
                          type: string
                          enum: [created, updated, deleted]
        '401': { $ref: '#/components/responses/Unauthorized' }
        '422': { $ref: '#/components/responses/Validation' }

  /memories:
    get:
      summary: Get all memories
      tags: [Memories]
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  identity:   { type: array, items: { $ref: '#/components/schemas/MemoryItem' } }
                  principles: { type: array, items: { $ref: '#/components/schemas/MemoryItem' } }
                  focus:      { type: array, items: { $ref: '#/components/schemas/MemoryItem' } }
                  signals:    { type: array, items: { $ref: '#/components/schemas/MemoryItem' } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /memories/{type}:
    post:
      summary: Create a memory item
      tags: [Memories]
      parameters:
        - $ref: '#/components/parameters/TypeParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [key, value]
              properties:
                key:   { type: string, maxLength: 120 }
                value: { type: string, maxLength: 240 }
      responses:
        '201':
          content:
            application/json:
              schema: { $ref: '#/components/schemas/MemoryItem' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '422': { $ref: '#/components/responses/Validation' }

  /memories/{type}/{id}:
    put:
      summary: Update memory value (and/or key)
      tags: [Memories]
      parameters:
        - $ref: '#/components/parameters/TypeParam'
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:   { type: string, maxLength: 120 }
                value: { type: string, maxLength: 240 }
      responses:
        '200': { content: { application/json: { schema: { $ref: '#/components/schemas/MemoryItem' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '422': { $ref: '#/components/responses/Validation' }

    delete:
      summary: Delete memory
      tags: [Memories]
      parameters:
        - $ref: '#/components/parameters/TypeParam'
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }

components:
  securitySchemes:
    bearerAuth: { type: http, scheme: bearer }
  parameters:
    TypeParam:
      name: type
      in: path
      required: true
      schema:
        type: string
        enum: [identity, principles, focus, signals]
  schemas:
    MemoryItem:
      type: object
      required: [id, key, value, type, created_at, updated_at]
      properties:
        id: { type: string }
        type: { type: string, enum: [identity, principles, focus, signals] }
        key: { type: string }
        value: { type: string, maxLength: 240 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
        by: { type: string, enum: [user, agent], description: "Last editor" }
        source_message_id: { type: string, nullable: true }
  responses:
    Unauthorized:
      description: Unauthorized
    NotFound:
      description: Not found
    Validation:
      description: Validation error
